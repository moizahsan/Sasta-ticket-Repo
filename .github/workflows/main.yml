name: Docker Image CI

on:
  push:
    branches: [ develop ]

jobs:

  build:

    runs-on: ubuntu-latest
    steps:
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d-%H-%M-%S')"
    - name: Test with environment variables
      run: echo $TAG_NAME - $RELEASE_NAME
      env:
          TAG_NAME: tag-${{ steps.date.outputs.date }}
          RELEASE_NAME: release-${{ steps.date.outputs.date }}

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: sastaticket
        tags: latest
        tag: ${{ steps.date.outputs.date }}-${{ github.sha }}
      run: |
        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$tags -t $ECR_REGISTRY/$ECR_REPOSITORY:$tag
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$tag

    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition   datascience-api-staging-taskdef \
          --query taskDefinition > task-definition.json

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #       task-definition: task-definition.json
    #       container-name:  dsapi
    #       image: 361421599476.dkr.ecr.ap-southeast-1.amazonaws.com/sastaticket:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: task-definition.json
          service: datascience-api-staging-service
          cluster: datascience-api-staging1
          wait-for-service-stability: true
